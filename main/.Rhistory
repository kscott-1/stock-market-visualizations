knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("old_project_img.png")
suppressPackageStartupMessages(library(TTR))
suppressPackageStartupMessages(library(quantmod))
aapl <- getSymbols("AAPL", from = "2017-01-01", auto.assign = F)
tsla <- getSymbols("TSLA", from = "2017-01-01", auto.assign = F)
aapl_df <- data.frame(Date=index(aapl), coredata(aapl))
tsla_df <- data.frame(Date=index(tsla), coredata(tsla))
colnames(aapl_df) <- c("Date", "Open Price", "High Price", "Low Price", "Close Price", "Volume", "Adjusted Price")
colnames(tsla_df) <- c("Date", "Open Price", "High Price", "Low Price", "Close Price", "Volume", "Adjusted Price")
aapl_df <- dplyr::mutate(aapl_df, Ticker = 'AAPL')
tsla_df <- dplyr::mutate(tsla_df, Ticker = 'TSLA')
aapl_st <- log(aapl_df$`Open Price`)
tsla_st <- log(tsla_df$`Open Price`)
aapl_df <- cbind(aapl_df, aapl_st)
tsla_df <- cbind(tsla_df, tsla_st)
colnames(aapl_df)[9] <- "log(Open Price)"
colnames(tsla_df)[9] <- "log(Open Price)"
all_stocks_df <- rbind(aapl_df, tsla_df)
pct_chng <- (all_stocks_df$`Close Price`[2:nrow(all_stocks_df)] - all_stocks_df$`Close Price`[1:(nrow(all_stocks_df) - 1)]) / all_stocks_df$`Close Price`[2:nrow(all_stocks_df)]
pct_chng <- c(NA, pct_chng)
all_stocks_df <- cbind(all_stocks_df, pct_chng)
colnames(all_stocks_df)[10] <- "Daily Percent Change"
all_stocks_df$`Daily Percent Change` <- all_stocks_df$`Daily Percent Change` * 100
all_stocks_df$`Daily Percent Change`[(nrow(all_stocks_df) / 2) + 1] <- NA
head(all_stocks_df)
tail(all_stocks_df)
library(ggplot2)
ggplot(data = all_stocks_df, aes(x = Date, y = `Open Price`, color = Ticker)) +
geom_line() +
labs(title = 'Stock Price Trend from 01-01-2017 to Present', subtitle = 'Stable vs Volatile stock comparison of $AAPL and $TSLA. \nDifferent Scales - NOT USEFUL for comparison.', caption = '*Pricing Data pulled from\nthe quantmod package using\nthe Yahoo Finance API', y = "Price") +
scale_x_date(date_breaks = "6 month", date_labels = "%m-%y", guide = guide_axis(n.dodge = 2)) +
scale_y_continuous(breaks = seq(0, 1300, 50)) +
scale_color_manual(values = c('light blue', 'red')) +
theme_bw(base_family = "mono") +
theme(legend.background = element_rect(color = 'black'))
ggplot(data = all_stocks_df, aes(x = Date, y = `log(Open Price)`, color = Ticker)) +
geom_line() +
labs(title = 'Stock Price Trend from 01-01-2017 to Present', subtitle = 'Stable vs Volatile stock comparison of $AAPL and $TSLA plotted on a Logarithmic price scale. \nPlots prices based on percentage change - better for comparison.', caption = '*Pricing Data pulled from\nthe quantmod package using\nthe Yahoo Finance API', y = "log(Price)") +
scale_x_date(date_breaks = "6 month", date_labels = "%m-%y", guide = guide_axis(n.dodge = 2)) +
scale_y_continuous(breaks = seq(0, 8, 0.5)) +
scale_color_manual(values = c('light blue', 'red')) +
theme_bw(base_family = "mono") +
theme(legend.background = element_rect(color = 'black'))
ggplot(data = all_stocks_df, aes(x = Date, y = `Daily Percent Change`, color = Ticker)) +
geom_line() +
labs(title = 'Daily Percentage Change in Stock Price from 01-01-2017 to Present', subtitle = 'Large spikes across the graph for TSLA, including percentage drops \nof over 15% 7 times for TSLA to 0 for AAPL. Day to day volatility \nclearly higher for TSLA.', caption = '*Pricing Data pulled from\nthe quantmod package using\nthe Yahoo Finance API') +
scale_x_date(date_breaks = "6 month", date_labels = "%m-%y", guide = guide_axis(n.dodge = 2)) +
scale_y_continuous(breaks = seq(-25, 15, 5)) +
scale_color_manual(values = c('light blue', 'red')) +
theme_bw(base_family = "mono") +
theme(legend.background = element_rect(color = 'black')) +
facet_wrap(~Ticker)
aapl_df <- subset(aapl_df, select = -c(`Close Price`, `High Price`, `Low Price`, `Volume`, `Adjusted Price`))
tsla_df <- subset(tsla_df, select = -c(`Close Price`, `High Price`, `Low Price`, `Volume`, `Adjusted Price`))
aapl_actual_price <- aapl_df$`Open Price`[6:nrow(aapl_df)]
aapl_lag1 <- aapl_df$`Open Price`[5:(nrow(aapl_df) - 1)]
aapl_lag2 <- aapl_df$`Open Price`[4:(nrow(aapl_df) - 2)]
aapl_lag3 <- aapl_df$`Open Price`[3:(nrow(aapl_df) - 3)]
aapl_lag4 <- aapl_df$`Open Price`[2:(nrow(aapl_df) - 4)]
aapl_lag5 <- aapl_df$`Open Price`[1:(nrow(aapl_df) - 5)]
tsla_actual_price <- tsla_df$`Open Price`[6:nrow(tsla_df)]
tsla_lag1 <- tsla_df$`Open Price`[5:(nrow(tsla_df) - 1)]
tsla_lag2 <- tsla_df$`Open Price`[4:(nrow(tsla_df) - 2)]
tsla_lag3 <- tsla_df$`Open Price`[3:(nrow(tsla_df) - 3)]
tsla_lag4 <- tsla_df$`Open Price`[2:(nrow(tsla_df) - 4)]
tsla_lag5 <- tsla_df$`Open Price`[1:(nrow(tsla_df) - 5)]
na <- rep(NA, 5)
aapl_actual_price <- c(na, aapl_actual_price)
aapl_lag1 <- c(na, aapl_lag1)
aapl_lag2 <- c(na, aapl_lag2)
aapl_lag3 <- c(na, aapl_lag3)
aapl_lag4 <- c(na, aapl_lag4)
aapl_lag5 <- c(na, aapl_lag5)
tsla_actual_price <- c(na, tsla_actual_price)
tsla_lag1 <- c(na, tsla_lag1)
tsla_lag2 <- c(na, tsla_lag2)
tsla_lag3 <- c(na, tsla_lag3)
tsla_lag4 <- c(na, tsla_lag4)
tsla_lag5 <- c(na, tsla_lag5)
aapl_df <- cbind(aapl_df, aapl_actual_price, aapl_lag1, aapl_lag2, aapl_lag3, aapl_lag4, aapl_lag5)
tsla_df <- cbind(tsla_df, tsla_actual_price, tsla_lag1, tsla_lag2, tsla_lag3, tsla_lag4, tsla_lag5)
aapl_trtst <- split(aapl_df, aapl_df$Date < as.Date("2022-01-01"))
aapl_train <- data.frame(aapl_trtst[2])
aapl_test <- data.frame(aapl_trtst[1])
tsla_trtst <- split(tsla_df, tsla_df$Date < as.Date("2022-01-01"))
tsla_train <- data.frame(tsla_trtst[2])
tsla_test <- data.frame(tsla_trtst[1])
colnames(aapl_train) <- c("Date", "Open Price", "Ticker", "log(Open Price)", "Actual Price", "Lag 1", "Lag 2", "Lag 3", "Lag 4", "Lag 5")
colnames(aapl_test) <- c("Date", "Open Price", "Ticker", "log(Open Price)", "Actual Price", "Lag 1", "Lag 2", "Lag 3", "Lag 4", "Lag 5")
colnames(tsla_train) <- c("Date", "Open Price", "Ticker", "log(Open Price)", "Actual Price", "Lag 1", "Lag 2", "Lag 3", "Lag 4", "Lag 5")
colnames(tsla_test) <- c("Date", "Open Price", "Ticker", "log(Open Price)", "Actual Price", "Lag 1", "Lag 2", "Lag 3", "Lag 4", "Lag 5")
suppressPackageStartupMessages(library(xgboost))
aapl_xtrain <- as.matrix(na.omit(aapl_train[6:10]))
aapl_xtest <- as.matrix(na.omit(aapl_test[6:10]))
aapl_ytrain <- as.matrix(na.omit(aapl_train[5]))
aapl_ytest <- as.matrix(na.omit(aapl_test[5]))
###
# default XGBoost, no param tuning or CV
###
set.seed(8999)
# create the xgb.DMatrix train/test
aapl_dtrain <- xgb.DMatrix(data = aapl_xtrain, label = aapl_ytrain)
aapl_dtest <- xgb.DMatrix(data = aapl_xtest, label = aapl_ytest)
# mape will be evaluated at each iteration for these sets
aapl_watchlist <- list(train = aapl_dtrain, test = aapl_dtest)
aapl_xgb_default <- xgb.train(data = aapl_dtrain, max.depth = 6, eta = 0.3, nrounds = 1000, watchlist = aapl_watchlist, eval_metric = "mape", early_stopping_rounds = 20, print_every_n = 10, maximize = F)
###
# XGBoost with validation
###
n <- as.integer(0.8*nrow(aapl_xtrain))
aapl_xvtrain <- aapl_xtrain[1:n,]
aapl_xvalid <- aapl_xtrain[(n+1):nrow(aapl_xtrain),]
aapl_yvtrain <- aapl_ytrain[1:n,]
aapl_yvalid <- aapl_ytrain[(n+1):nrow(aapl_xtrain),]
aapl_vtrain <- xgb.DMatrix(data = aapl_xvtrain, label = aapl_yvtrain)
aapl_valid <- xgb.DMatrix(data = aapl_xvalid, label = aapl_yvalid)
watchlist <- list(train = aapl_vtrain, valid = aapl_valid)
aapl_xgb_valid <- xgb.train(data = aapl_vtrain, max.depth = 6, eta = 0.3, nround = 10000, watchlist = watchlist, early_stopping_rounds = 50, eval_metric = "rmse", print_every_n = 10, maximize = F)
valid_prediction <- predict(aapl_xgb_valid, aapl_dtest)
MAPE(valid_prediction, aapl_ytest)
params <- list(eta=0.3, gamma=0, max_depth=6, min_child_weight=1, subsample=1, colsample_bytree=1, eval_metric = "mape")
set.seed(8999)
aapl_xgbcv <- xgb.cv(params = params, data = aapl_dtrain, nrounds = 500, nfold = 5, showsd = T, print.every.n = 10, early.stop.round = 20, maximize = F)
aapl_xgb1 <- xgb.train(params = params, data = aapl_dtrain, nrounds = 39, watchlist = list(val = aapl_dtest,train = aapl_dtrain), print.every.n = 10, early.stop.round = 10, maximize = F)
aapl_xgbpred <- predict(aapl_xgb1, aapl_dtest)
xgb.plot.importance(xgb.importance(model = aapl_xgb1))
aapl_xgb_prediction <- data.frame("Daily Index" = 1:135, "Prediction Price" = aapl_xgbpred, "Actual Price" = aapl_ytest)
aapl_xgb_prediction <- data.frame("Daily Index" = 1:232, "Prediction Price" = aapl_xgbpred, "Actual Price" = aapl_ytest)
ggplot(data = aapl_xgb_prediction) +
geom_line(aes(x = Daily.Index, y = Actual.Price, color = 'Actual Price')) +
geom_line(aes(x = Daily.Index, y = Prediction.Price, color = 'Predicted Price')) +
labs(title = 'XGBoost Prediction Model Results for $aapl', subtitle = 'Using a 5 day lag, XGBoost algorithm predicts the price of the current day. \nCan be useful for day traders to determine if it is a good day to buy.', caption = '*Pricing Data pulled from\nthe quantmod package using\nthe Yahoo Finance API', x = "Daily Index", y = "Price of $aapl", color = "$aapl") +
scale_color_manual(values = c('dark green', 'red')) +
theme_bw(base_family = "mono") +
theme(legend.background = element_rect(color = 'black'))
tsla_xtrain <- as.matrix(na.omit(tsla_train[6:10]))
tsla_xtest <- as.matrix(na.omit(tsla_test[6:10]))
tsla_ytrain <- as.matrix(na.omit(tsla_train[5]))
tsla_ytest <- as.matrix(na.omit(tsla_test[5]))
tsla_xgb <- xgboost(tsla_xtrain, label = tsla_ytrain, nrounds = 50, eval_metric = "mape", verbose = 0, prediction = TRUE)
tsla_dtrain <- xgb.DMatrix(data = tsla_xtrain, label = tsla_ytrain)
tsla_dtest <- xgb.DMatrix(data = tsla_xtest, label = tsla_ytest)
params <- list(eta=0.3, gamma=0, max_depth=6, min_child_weight=1, subsample=1, colsample_bytree=1, eval_metric = "mape")
set.seed(8999)
tsla_xgbcv <- xgb.cv(params = params, data = tsla_dtrain, nrounds = 500, nfold = 5, showsd = T, print.every.n = 10, early.stop.round = 20, maximize = F)
tsla_xgb1 <- xgb.train(params = params, data = tsla_dtrain, nrounds = 16, watchlist = list(val = tsla_dtest,train = tsla_dtrain), print.every.n = 10, early.stop.round = 10, maximize = F)
tsla_xgbpred <- predict(tsla_xgb1, tsla_dtest)
xgb.plot.importance(xgb.importance(model = tsla_xgb1))
tsla_xgb_prediction <- data.frame("Daily Index" = 1:135, "Prediction Price" = tsla_xgbpred, "Actual Price" = tsla_ytest)
tsla_xgb_prediction <- data.frame("Daily Index" = 1:232, "Prediction Price" = tsla_xgbpred, "Actual Price" = tsla_ytest)
ggplot(data = tsla_xgb_prediction) +
geom_line(aes(x = Daily.Index, y = Actual.Price, color = 'Actual Price')) +
geom_line(aes(x = Daily.Index, y = Prediction.Price, color = 'Predicted Price')) +
labs(title = 'XGBoost Prediction Model Results for $tsla', subtitle = 'Using a 5 day lag, XGBoost algorithm predicts the price of the current day. \nCan be useful for day traders to determine if it is a good day to buy.', caption = '*Pricing Data pulled from\nthe quantmod package using\nthe Yahoo Finance API', x = "Daily Index", y = "Price of $tsla",  color = "$tsla") +
scale_color_manual(values = c('dark green', 'red')) +
theme_bw(base_family = "mono") +
theme(legend.background = element_rect(color = 'black'))
suppressPackageStartupMessages(library(MLmetrics))
MAPE(aapl_xgb_prediction$Prediction.Price, aapl_xgb_prediction$Actual.Price)
MAPE(tsla_xgb_prediction$Prediction.Price, tsla_xgb_prediction$Actual.Price)
aapl_ts <- ts(aapl$AAPL.Open)
suppressPackageStartupMessages(library(dbnlearn))
suppressPackageStartupMessages(library(bnviewer))
X_aapl_ts <- dbn.preprocessing(aapl_ts, window = 5)
X_aapl_ts_train <- X_aapl_ts[1:1254,]
X_aapl_ts_test <- X_aapl_ts[1255:nrow(X_aapl_ts),]
suppressPackageStartupMessages(library(bnlearn))
aapl_ts_learning = dbn.learn(X_aapl_ts_train)
aapl_ts_fit <- dbn.fit(aapl_ts_learning, X_aapl_ts_train)
aapl_prediction <- dbn.predict(aapl_ts_fit, X_aapl_ts_test)
aapl_real <- X_aapl_ts_test[, "X_t"]
aapl_validation <- data.frame(list(real = aapl_real, prediction = aapl_prediction))
ggplot(aapl_validation, aes(seq(1:nrow(aapl_validation)))) +
geom_line(aes(y = real, color = "Actual Price")) +
geom_line(aes(y = prediction, colour = "Predicted Price")) +
labs(title = "Dynamic Bayesian Network for $aapl Price Prediction",
subtitle = "", color = "Legend", x = "Daily Index", y = "Price of $aapl") +
scale_color_manual(values = c('Actual Price' = 'dark green', 'Predicted Price' = 'red')) +
theme_bw(base_family = "mono") +
theme(legend.background = element_rect(color = 'black'))
tsla_ts <- ts(tsla$TSLA.Open)
X_tsla_ts <- dbn.preprocessing(tsla_ts, window = 5)
X_tsla_ts_train <- X_tsla_ts[1:1254,]
X_tsla_ts_test <- X_tsla_ts[1255:nrow(X_tsla_ts),]
tsla_ts_learning = dbn.learn(X_tsla_ts_train)
tsla_ts_fit <- dbn.fit(tsla_ts_learning, X_tsla_ts_train)
tsla_prediction <- dbn.predict(tsla_ts_fit, X_tsla_ts_test)
tsla_real <- X_tsla_ts_test[, "X_t"]
tsla_validation <- data.frame(list(real = tsla_real, prediction = tsla_prediction))
ggplot(tsla_validation, aes(seq(1:nrow(tsla_validation)))) +
geom_line(aes(y = real, color = "Actual Price")) +
geom_line(aes(y = prediction, colour = "Predicted Price")) +
labs(title = "Dynamic Bayesian Network for $tsla Price Prediction",
subtitle = "", color = "Legend", x = "Daily Index", y = "Price of $tsla") +
scale_color_manual(values = c('Actual Price' = 'dark green', 'Predicted Price' = 'red')) +
theme_bw(base_family = "mono") +
theme(legend.background = element_rect(color = 'black'))
MAPE(aapl_prediction, aapl_real)
MAPE(tsla_prediction, tsla_real)
suppressPackageStartupMessages(library(forecast))
suppressPackageStartupMessages(library(tseries))
aapl_ts_train <- ts(aapl_train$`Open Price`)
aapl_ts_test <- ts(aapl_test$`Open Price`)
kpss.test(aapl_ts_train)
aapl_ts_diff <- diff(aapl_ts_train)
kpss.test(aapl_ts_diff)
suppressPackageStartupMessages(library(ggfortify))
autoplot(aapl_ts_diff, ts.colour = 'brown') +
labs(title = "Difference in Daily Price for $aapl", subtitle = "",
x = "Daily Index", y = "Price Difference") +
scale_y_continuous(breaks = seq(-10, 5, 1)) +
theme_bw(base_family = "mono")
Acf(aapl_ts_diff, main = 'ACF Plot - Differenced aapl ts', lag.max = 20)
aapl_arima <- auto.arima(aapl_ts_train)
summary(aapl_arima)
# pot forecast
aapl_forecast <- forecast(aapl_arima, h = 134)
plot(aapl_forecast)
# plot test time series of the period 2001-2016
lines(ts(coredata(aapl_ts_test),
start = start(aapl_forecast$mean)[1],
frequency = 1), col = 'magenta')
tsla_ts_train <- ts(tsla_train$`Open Price`)
tsla_ts_test <- ts(tsla_test$`Open Price`)
kpss.test(tsla_ts_train)
tsla_ts_diff <- diff(tsla_ts_train)
kpss.test(tsla_ts_diff)
autoplot(tsla_ts_diff, ts.colour = 'blue') +
labs(title = "Difference in Daily Price for $tsla", subtitle = "",
x = "Daily Index", y = "Price Difference") +
scale_y_continuous(breaks = seq(-10, 5, 1)) +
theme_bw(base_family = "mono")
Acf(tsla_ts_diff, main = 'ACF Plot - Differenced tsla ts', lag.max = 20)
tsla_arima <- auto.arima(tsla_ts_train)
summary(tsla_arima)
# pot forecast
tsla_forecast <- forecast(tsla_arima, h = 134)
plot(tsla_forecast)
# plot test time series of the period 2001-2016
lines(ts(coredata(tsla_ts_test),
start = start(tsla_forecast$mean)[1],
frequency = 1), col = 'magenta')
autoplot(tsla_ts_diff, ts.colour = 'blue') +
labs(title = "Difference in Daily Price for $tsla", subtitle = "",
x = "Daily Index", y = "Price Difference") +
scale_y_continuous(breaks = seq(-50, 50, 1)) +
theme_bw(base_family = "mono")
autoplot(tsla_ts_diff, ts.colour = 'blue') +
labs(title = "Difference in Daily Price for $tsla", subtitle = "",
x = "Daily Index", y = "Price Difference") +
scale_y_continuous(breaks = seq(-35, 35, 5)) +
theme_bw(base_family = "mono")
autoplot(tsla_ts_diff, ts.colour = 'blue') +
labs(title = "Difference in Daily Price for $tsla", subtitle = "",
x = "Daily Index", y = "Price Difference") +
scale_y_continuous(breaks = seq(-50, 35, 5)) +
theme_bw(base_family = "mono")
autoplot(tsla_ts_diff, ts.colour = 'blue') +
labs(title = "Difference in Daily Price for $tsla", subtitle = "",
x = "Daily Index", y = "Price Difference") +
scale_y_continuous(breaks = seq(-60, 35, 5)) +
theme_bw(base_family = "mono")
###
# XGBoost with validation
###
n <- as.integer(0.8*nrow(aapl_xtrain))
aapl_xvtrain <- aapl_xtrain[1:n,]
aapl_xvalid <- aapl_xtrain[(n+1):nrow(aapl_xtrain),]
aapl_yvtrain <- aapl_ytrain[1:n,]
aapl_yvalid <- aapl_ytrain[(n+1):nrow(aapl_xtrain),]
aapl_vtrain <- xgb.DMatrix(data = aapl_xvtrain, label = aapl_yvtrain)
aapl_valid <- xgb.DMatrix(data = aapl_xvalid, label = aapl_yvalid)
watchlist <- list(train = aapl_vtrain, valid = aapl_valid)
aapl_xgb_valid <- xgb.train(data = aapl_vtrain, max.depth = 6, eta = 0.3, nround = 10000, watchlist = watchlist, early_stopping_rounds = 50, eval_metric = "rmse", print_every_n = 10, maximize = F)
valid_prediction <- predict(aapl_xgb_valid, aapl_dtest)
params <- list(eta=0.3, gamma=0, max_depth=6, min_child_weight=1, subsample=1, colsample_bytree=1, eval_metric = "mape")
set.seed(8999)
aapl_xgbcv <- xgb.cv(params = params, data = aapl_dtrain, nrounds = 500, nfold = 5, showsd = T, print.every.n = 10, early.stop.round = 20, maximize = F)
aapl_xgb1 <- xgb.train(params = params, data = aapl_dtrain, nrounds = 39, watchlist = list(val = aapl_dtest,train = aapl_dtrain), print.every.n = 10, early.stop.round = 10, maximize = F)
aapl_xgbpred <- predict(aapl_xgb1, aapl_dtest)
xgb.plot.importance(xgb.importance(model = aapl_xgb1))
###
# XGBoost with validation
###
n <- as.integer(0.8*nrow(aapl_xtrain))
aapl_xvtrain <- aapl_xtrain[1:n,]
aapl_xvalid <- aapl_xtrain[(n+1):nrow(aapl_xtrain),]
aapl_yvtrain <- aapl_ytrain[1:n,]
aapl_yvalid <- aapl_ytrain[(n+1):nrow(aapl_xtrain),]
aapl_vtrain <- xgb.DMatrix(data = aapl_xvtrain, label = aapl_yvtrain)
aapl_valid <- xgb.DMatrix(data = aapl_xvalid, label = aapl_yvalid)
watchlist <- list(train = aapl_vtrain, valid = aapl_valid)
aapl_xgb_valid <- xgb.train(data = aapl_vtrain, max.depth = 6, eta = 0.3, nround = 10000, watchlist = watchlist, early_stopping_rounds = 50, eval_metric = "mape", print_every_n = 10, maximize = F)
valid_prediction <- predict(aapl_xgb_valid, aapl_dtest)
params <- list(eta=0.3, gamma=0, max_depth=6, min_child_weight=1, subsample=1, colsample_bytree=1, eval_metric = "mape")
set.seed(8999)
aapl_xgbcv <- xgb.cv(params = params, data = aapl_dtrain, nrounds = 500, nfold = 5, showsd = T, print.every.n = 10, early.stop.round = 20, maximize = F)
aapl_xgb1 <- xgb.train(params = params, data = aapl_dtrain, nrounds = 39, watchlist = list(val = aapl_dtest,train = aapl_dtrain), print_every_n = 10, early_stop_round = 10, maximize = F)
aapl_xgb1 <- xgb.train(params = params, data = aapl_dtrain, nrounds = 39, watchlist = list(val = aapl_dtest,train = aapl_dtrain), print_every_n = 10, maximize = F)
###
# XGBoost with validation
###
n <- as.integer(0.8*nrow(aapl_xtrain))
aapl_xvtrain <- aapl_xtrain[1:n,]
aapl_xvalid <- aapl_xtrain[(n+1):nrow(aapl_xtrain),]
aapl_yvtrain <- aapl_ytrain[1:n,]
aapl_yvalid <- aapl_ytrain[(n+1):nrow(aapl_xtrain),]
aapl_vtrain <- xgb.DMatrix(data = aapl_xvtrain, label = aapl_yvtrain)
aapl_valid <- xgb.DMatrix(data = aapl_xvalid, label = aapl_yvalid)
watchlist <- list(train = aapl_vtrain, valid = aapl_valid)
aapl_xgb_valid <- xgb.train(data = aapl_vtrain, max.depth = 6, eta = 0.3, nround = 10000, watchlist = watchlist, early_stopping_rounds = 50, eval_metric = "mape", print_every_n = 10, maximize = F)
valid_prediction <- predict(aapl_xgb_valid, aapl_dtest)
###
# XGBoost with validation
###
n <- as.integer(0.8*nrow(aapl_xtrain))
aapl_xvtrain <- aapl_xtrain[1:n,]
aapl_xvalid <- aapl_xtrain[(n+1):nrow(aapl_xtrain),]
aapl_yvtrain <- aapl_ytrain[1:n,]
aapl_yvalid <- aapl_ytrain[(n+1):nrow(aapl_xtrain),]
aapl_vtrain <- xgb.DMatrix(data = aapl_xvtrain, label = aapl_yvtrain)
aapl_valid <- xgb.DMatrix(data = aapl_xvalid, label = aapl_yvalid)
watchlist <- list(train = aapl_vtrain, valid = aapl_valid)
aapl_xgb_valid <- xgb.train(data = aapl_vtrain, max.depth = 6, eta = 0.3, nround = 10000, watchlist = watchlist, early_stopping_rounds = 50, eval_metric = "mape", print_every_n = 10, maximize = F)
valid_prediction <- predict(aapl_xgb_valid, aapl_dtest)
